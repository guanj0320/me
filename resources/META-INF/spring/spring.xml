<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
             xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
             xmlns:context="http://www.springframework.org/schema/context"
             xmlns:aop="http://www.springframework.org/schema/aop"
             xmlns:tx="http://www.springframework.org/schema/tx"
             xmlns:p="http://www.springframework.org/schema/p"
             xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
                     http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd
                     http://www.springframework.org/schema/aop  http://www.springframework.org/schema/aop/spring-aop-3.2.xsd
                     http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.2.xsd">
           
  <!-- 指定配置文件 -->
  <bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
	<property name="locations">
	  <list>	
		<value>classpath:META-INF/datasource.properties</value>
        <value>classpath:META-INF/mail/mail.properties</value>
	  </list>
	</property>
  </bean>

   <!-- 数据源0 -->
	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
        <property name="driverClassName" value="${jdbc.driver}"/>
	    <property name="url" value="${jdbc0.url}" />
	    <property name="username" value="${jdbc0.user}" />
	    <property name="password" value="${jdbc0.password}" /><!-- 对密码进行加密（在命令行中输入）：java -cp druid-0.2.23.jar com.alibaba.druid.filter.config.ConfigTools you_password -->
	    <property name="filters" value="config,wall,stat" />
        <property name="connectionProperties" value="config.decrypt=true" /><!-- 表示数据密码需要进行解密 -->
	    <property name="maxActive" value="300" />
	    <property name="initialSize" value="10" />
	    <property name="maxWait" value="10000" />
	    <property name="minIdle" value="10" />
	    <property name="timeBetweenEvictionRunsMillis" value="3000" />
	    <property name="minEvictableIdleTimeMillis" value="300000" />
	    <property name="validationQuery" value="SELECT 'x'" />
	    <property name="testWhileIdle" value="true" />
	    <property name="testOnBorrow" value="false" />
	    <property name="testOnReturn" value="false" />
	    <property name="poolPreparedStatements" value="false" />
	    <property name="maxPoolPreparedStatementPerConnectionSize" value="20" />
	    <property name="removeAbandoned" value="true" /> <!-- 打开removeAbandoned功能 -->
	    <property name="removeAbandonedTimeout" value="1800" /> <!-- 1800秒，也就是30分钟 -->
	    <property name="logAbandoned" value="true" /> <!-- 关闭abanded连接时输出错误日志 -->
	</bean>

 
  <!-- 事务管理器 -->
  <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
    <property name="dataSource"><ref local="dataSource"/></property>
  </bean>


  
  <!-- 事务是针对service层的方法的,例如在serivce层中有方法对数据库进行了两次插入操作，第一次应该是可以插入数据库的，第二次是有错误的，那么如果在service设置的事务，此二次插入都是不成功的，这就是spring管理了事务 -->
  <bean id="txProxyTemplate" abstract="true"
        class="org.springframework.transaction.interceptor.TransactionProxyFactoryBean">
	<property name="transactionManager" ref="transactionManager"/>
    <property name="transactionAttributes">
      <props>    	
    	<prop key="save*">PROPAGATION_REQUIRED</prop>
    	<prop key="insert*">PROPAGATION_REQUIRED</prop>
        <prop key="add*">PROPAGATION_REQUIRED</prop>
    	<prop key="update*">PROPAGATION_REQUIRED</prop>
    	<prop key="modify*">PROPAGATION_REQUIRED</prop>
    	<prop key="delete*">PROPAGATION_REQUIRED</prop>	
    	<prop key="remove*">PROPAGATION_REQUIRED</prop>
        <prop key="*">PROPAGATION_SUPPORTS,readOnly</prop>
      </props>
    </property>
  </bean>
   
  <!-- ibatis使用 -->
  <bean id="sqlMapClient" class="org.springframework.orm.ibatis.SqlMapClientFactoryBean">
	<property name="dataSource">
	  <ref bean="dataSource" />
	</property>
	<property name="configLocations">
	  <list>
	  	<value>classpath:META-INF/ibatis/sqlMapConfig.xml</value>
	  </list>
	</property>
  </bean>


  <!-- 为了ibatis实现物理分页，自定义的sql执行器，需要实现不同数据库的方言 -->
  <bean id="sqlExecutor" class="pf.persistent.ibatis.LimitSqlExecutor">  
  	<property name="dialect">  
      <bean class="pf.persistent.ibatis.dialect.MySQLDialect" />
    </property>  
  </bean>


  <!-- DAO基类，为了实现物理分页，在初始化方法里注入sqlExecutor -->
  <bean id="baseDAO" abstract="true" class="pf.persistent.dao.BaseDAO" init-method="initialize">
    <property name="sqlMapClient">
      <ref bean="sqlMapClient" />
    </property>
    <property name="sqlExecutor">
      <ref bean="sqlExecutor" />
    </property>
  </bean>


    <!-- 自动扫描组件，需要把controller去掉，否则影响事务管理(针对springmvc) -->
    <context:component-scan base-package="me.guanjun">
        <context:exclude-filter type="regex" expression="me.guanjun.web.*"/>
    </context:component-scan>

</beans>